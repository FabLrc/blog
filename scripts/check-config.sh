#!/bin/bash
# Script de test pour v√©rifier la configuration Docker avant d√©ploiement

set -e

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${BLUE}üîç V√©rification de la configuration Docker${NC}"
echo "=========================================="
echo ""

# Fonction pour v√©rifier l'existence d'un fichier
check_file() {
    if [ -f "$1" ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $1 - MANQUANT${NC}"
        return 1
    fi
}

# Fonction pour v√©rifier l'existence d'un dossier
check_dir() {
    if [ -d "$1" ]; then
        echo -e "${GREEN}‚úÖ $1/${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $1/ - MANQUANT${NC}"
        return 1
    fi
}

echo -e "${BLUE}üìÅ V√©rification des fichiers Docker:${NC}"
check_file "docker-compose.yml"
check_file "docker-compose.nas.yml"
check_file "Dockerfile"
check_file "backend/Dockerfile"
check_file "frontend/Dockerfile"
check_file "backend/.dockerignore"
check_file "frontend/.dockerignore"
echo ""

echo -e "${BLUE}üìÅ V√©rification des scripts:${NC}"
check_file "scripts/start.sh"
check_file "scripts/deploy-to-nas.sh"
check_file "backend/generate-secrets.sh"
echo ""

echo -e "${BLUE}üìÅ V√©rification de la structure:${NC}"
check_dir "backend"
check_dir "frontend"
check_dir "backend/config"
check_dir "frontend/src"
check_dir ".github/workflows"
echo ""

echo -e "${BLUE}üìÅ V√©rification des configurations:${NC}"
check_file "backend/package.json"
check_file "frontend/package.json"
check_file "backend/config/server.ts"
check_file "backend/config/middlewares.ts"
check_file "frontend/next.config.ts"
check_file ".github/workflows/build-and-push.yml"
echo ""

echo -e "${BLUE}üîç V√©rification du contenu docker-compose.nas.yml:${NC}"
if grep -q "ghcr.io/fablrc/blog-backend:latest" docker-compose.nas.yml; then
    echo -e "${GREEN}‚úÖ Image backend configur√©e${NC}"
else
    echo -e "${RED}‚ùå Image backend non configur√©e ou incorrecte${NC}"
fi

if grep -q "ghcr.io/fablrc/blog-frontend:latest" docker-compose.nas.yml; then
    echo -e "${GREEN}‚úÖ Image frontend configur√©e${NC}"
else
    echo -e "${RED}‚ùå Image frontend non configur√©e ou incorrecte${NC}"
fi

if grep -q "watchtower" docker-compose.nas.yml; then
    echo -e "${GREEN}‚úÖ Watchtower configur√©${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Watchtower non configur√© (mises √† jour manuelles)${NC}"
fi

if grep -q "blog-network" docker-compose.nas.yml; then
    echo -e "${GREEN}‚úÖ R√©seau Docker configur√©${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  R√©seau Docker non configur√©${NC}"
fi
echo ""

echo -e "${BLUE}üîç V√©rification du workflow GitHub Actions:${NC}"
if grep -q "GITHUB_TOKEN" .github/workflows/build-and-push.yml; then
    echo -e "${GREEN}‚úÖ Authentification GHCR configur√©e${NC}"
else
    echo -e "${RED}‚ùå Authentification GHCR manquante${NC}"
fi

if grep -q "docker/build-push-action" .github/workflows/build-and-push.yml; then
    echo -e "${GREEN}‚úÖ Actions de build configur√©es${NC}"
else
    echo -e "${RED}‚ùå Actions de build manquantes${NC}"
fi
echo ""

echo -e "${BLUE}üîç V√©rification des Dockerfiles:${NC}"

# Backend Dockerfile
if grep -q "generate-secrets.sh" backend/Dockerfile; then
    echo -e "${GREEN}‚úÖ Backend: g√©n√©ration de secrets configur√©e${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Backend: g√©n√©ration de secrets non configur√©e${NC}"
fi

if grep -q "ENTRYPOINT" backend/Dockerfile; then
    echo -e "${GREEN}‚úÖ Backend: ENTRYPOINT d√©fini${NC}"
else
    echo -e "${RED}‚ùå Backend: ENTRYPOINT manquant${NC}"
fi

# Frontend Dockerfile
if grep -q "standalone" frontend/Dockerfile; then
    echo -e "${GREEN}‚úÖ Frontend: build standalone configur√©${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Frontend: build standalone recommand√© pour la prod${NC}"
fi

if grep -q "server.js" frontend/Dockerfile; then
    echo -e "${GREEN}‚úÖ Frontend: d√©marrage optimis√©${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Frontend: d√©marrage non optimis√©${NC}"
fi
echo ""

echo -e "${BLUE}üîç V√©rification de next.config.ts:${NC}"
if grep -q "standalone" frontend/next.config.ts; then
    echo -e "${GREEN}‚úÖ Next.js: mode standalone activ√©${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Next.js: mode standalone recommand√©${NC}"
fi

if grep -q "backend" frontend/next.config.ts; then
    echo -e "${GREEN}‚úÖ Next.js: hostname backend configur√©${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Next.js: hostname backend non configur√©${NC}"
fi
echo ""

echo -e "${BLUE}üìä R√©sum√©:${NC}"
echo "=========================================="
echo -e "${GREEN}‚úÖ Configuration de base OK${NC}"
echo ""
echo -e "${BLUE}üìã Prochaines √©tapes:${NC}"
echo "1. V√©rifier que Git est √† jour: git status"
echo "2. Committer les changements: git add . && git commit -m 'Configure NAS deployment'"
echo "3. Pousser vers GitHub: git push origin main"
echo "4. V√©rifier le build dans Actions: https://github.com/FabLrc/blog/actions"
echo "5. D√©ployer sur le NAS: ./scripts/deploy-to-nas.sh <IP_NAS> <USER>"
echo ""
echo -e "${GREEN}üéâ Tout est pr√™t pour le d√©ploiement !${NC}"
